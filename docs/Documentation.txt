REALTIMECLOCK LIBRARY VERSION 2
11/2/19
changes from version 1:
changed toggleclock() to truly toggle the clock from on to off and vice versa.
before this function would just toggle the clock to on, and also inadvertantly clear
the seconds register.

This is documentation detailing the use of RealTimeClock.h

RealTimeClock.h is designed for use with the Maxim DS1307 Real time clock IC.
https://www.digikey.com/product-detail/en/maxim-integrated/DS1307-/DS1307--ND/956883

***UPDATED FOR VERSION 2***

NOTE: This library requires the Wire.h library in order to function
make sure to type #include <Wire.h>

CLASS -
The name of the class is "RealTimeClock" and can be initialized like so: RealTimeClock object_name;
the class constructor has no returns or parameters.

PUBLIC MEMBER FUNCTIONS - 
begin(void);
This function simply tests for a possible connection to the RTC. It has no arguments
and will return a value corresponding to the status of the connection. 
returns- int, will comply with the returns of Wire.beginTransmission();
0: successful connection with device
1: data too long to fit in transmit buffer 
2: received NACK on transmit of address 
3: received NACK on transmit of data 
4: other error 
arguments- none

writeTime(int hour,int min,int sec);
This function sets the time of the device by writing to the timekeeping registers.
Writing an "invalid" number for any of the arguments will cause the function to do nothing.
returns- none
arguments- 
hour: desired hours. must be less than or equal to 12  
min: desired minutes. must be less than 60
sec: desired seconds. must be less than 60

int getSeconds(void);
This function returns the current seconds according to the time keeping registers.
For example, if the time was 5:16:24 AM this function would return "24"
arguments- none
returns- int, current seconds

int getMinutes(void);
This function returns the current minutes according to the time keeping registers.
For example, if the time was 5:16:24 AM this function would return "16"
arguments- none
returns- int, current minutes

int getHours(void);
This function returns the current hours according to the time keeping registers.
For example, if the time was 5:16:24 AM this function would return "5"
arguments- none
returns- int, current hours

int getAmpm(void);
This function returns 1 if it's PM, 0 if AM. Pretty simple.
arguments- none
returns- 1 or 0

void setAmpm(unsigned int mod);
This function allows you to set the clock to AM or PM. Write 1 for PM and 0 for AM.
Passing a value greater than 1 results in no change.
arguments- 1 for PM, 0 for AM, anything else results in no change/compiler error
returns- none.

void setMode(int mod);
This function allows the user to set the RTC to 12 hour or 24 hour mode by writing
to address 0x02, more specifically it changes bit 6
arguments- mode. "12" for 12 hour mode and "24" for 24 hour mode. anything else does nothing.
returns- none

int getMode(void);
This function returns 12 or 24 depending on what mode the clock is currently in.
arguments- none
returns- "12" if in 12 hour mode and "24" if in 24 hour mode

